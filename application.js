// Generated by CoffeeScript 1.4.0
(function() {
  var appConfig, clientConfig, clientSetting, console, exec, express, expressServer, fs, http, io, jade, listeners, opts, server, stdio, utils;

  global.app = {
    server: {},
    config: require('./config.default'),
    storage: require('./lib/Storage')
  };

  exec = (require('child_process')).exec;

  fs = require('fs');

  express = require('express');

  http = require('http');

  console = require('console');

  stdio = require('stdio');

  jade = require('jade');

  utils = require('./overrides');

  expressServer = global.app.server = express();

  server = http.createServer(expressServer);

  io = (require('socket.io')).listen(server, {
    'log level': 1
  });

  listeners = require('./lib/Listeners');

  clientSetting = ['httpHost'];

  opts = stdio.getopt({
    'httpHost': {
      key: 'h',
      args: 1,
      description: 'Host for app'
    },
    'httpPort': {
      key: 'p',
      args: 1,
      description: 'Port for app'
    },
    'test': {
      key: 't',
      description: 'Port for app'
    }
  });

  try {
    if (opts.test) {
      appConfig = require('./config_test');
    } else {
      appConfig = require('./config');
    }
    global.app.config.extend(appConfig);
  } catch (error) {

  }

  global.app.config.extend(opts);

  clientConfig = (function() {
    var result, setting;
    if (!(clientSetting != null) || typeof clientSetting !== 'array') {
      return {};
    }
    result = [];
    for (setting in app.config) {
      if ((clientSetting.indexOf(setting)) !== -1) {
        result[setting] = app.config[setting];
      }
    }
    return result;
  })();

  clientConfig = "var appConfig = " + (JSON.stringify(global.app.config)) + ";";

  fs.writeFile('./public/js/config.js', clientConfig, function(err) {
    if (err) {
      return console.error(err);
    }
  });

  exec('coffee --compile --output ./public/js/ ./public/coffee/', function(err, stdout, stderr) {
    if (err) {
      console.error(err);
    }
    if (stderr) {
      return console.error(stderr);
    }
  });

  server.listen(global.app.config.httpPort);

  expressServer.use('/static/', express["static"]('./public'));

  expressServer.set('views', './public');

  expressServer.set('view engine', 'jade');

  expressServer.get("/", function(req, res) {
    return res.render("index");
  });

  expressServer.get("/hotseat", function(req, res) {
    return res.render("game_hotseat");
  });

  expressServer.get("/network", function(req, res) {
    return res.render("game_network");
  });

  io.sockets.on('connection', function(socket) {
    var action, actionName, _fn;
    _fn = function(actionName) {
      return socket.on(actionName, function(data) {
        return listeners[actionName](socket, data);
      });
    };
    for (actionName in listeners) {
      action = listeners[actionName];
      _fn(actionName);
    }
    return void 0;
  });

}).call(this);
